var daoPrefix = 'D';
var extension ='.java';
var conexaoClass = 'import java.sql.Connection;\n'+'import java.sql.DriverManager;\n'+'import java.sql.PreparedStatement;\n'+'\n'+'public class Conexao {\n'+'\n'+'\tprotected Connection con;\n'+'\tprivate boolean autoClose = true;\n'+'\n'+'\tpublic Conexao() {\n'+'\t\ttry {\n'+'\t\t\tfinal String URL = "jdbc:stringDeConexao";\n'+'\t\t\tcon = DriverManager.getConnection(URL, "DBlogin", "DBpassword");\n'+'\t\t\tPreparedStatement ps = con.prepareStatement("PRAGMA foreign_keys = ON");\n'+'\t\t\tps.execute();\n'+'\t\t} catch (Exception e) {\n'+'\t\t\te.printStackTrace();\n'+'\t\t}\n'+'\t}\n'+'\n'+'\tpublic void setAutoClose(boolean autoClose) {\n'+'\t\tthis.autoClose = autoClose;\n'+'\t}\n'+'\n'+'\tpublic void closeConnection() {\n'+'\t\ttry {\n'+'\t\t\tcon.close();\n'+'\t\t} catch (Exception e) {\n'+'\t\t}\n'+'\t}\n'+'\n'+'\tprotected void close() {\n'+'\t\tif (autoClose) {\n'+'\t\t\tcloseConnection();\n'+'\t\t}\n'+'\t}\n'+'\n'+'\tprotected java.sql.Date toDate(java.util.Date data) {\n'+'\t\treturn new java.sql.Date(data.getTime());\n'+'\t}\n'+'\n'+'\tprotected java.util.Date toDate(java.sql.Date data) {\n'+'\t\treturn new java.util.Date(data.getTime());\n'+'\t}\n'+'\n'+'}\n';

function processClass(package, classInfo, jpa){

	var className = classInfo.languageName;
	var fields = classInfo.fields;
	var field;

	var javaString = 'package '+package+'model;\n\n'+
	(jpa?'@Entity\n':'')+
	(jpa?'@Table(name = "' + classInfo.sqlName + '")\n':'')+
	'public class ' + className + ' {\n\n';

	var i;
	for (i in fields){
		field = fields[i];
		javaString +=
		(jpa&&field.primary?'\t@Id\n':'')+
		(jpa&&field.auto?'\t@GeneratedValue\n':'')+
		(jpa?'\t@Column(name = "' + field.sqlName + '")\n':'')+
		'\tprivate '+field.languageType+' '+field.name+';\n';
	}

	for(i in fields){
		field = fields[i];
		javaString += '\n\tpublic ' + field.languageType + ' ' + field.getType + field.funcName +'(){\n';
		javaString += '\t\treturn '+field.name+';\n';
		javaString += '\t}\n';

		javaString += '\n\tpublic ' + className + ' set' + field.funcName + '(' + field.languageType + ' ' + field.name + '){\n';
		javaString += '\t\tthis.' + field.name + ' = ' + field.name + ';\n';
		javaString += '\t\treturn this;\n';
		javaString += '\t}\n';
	}
	javaString += '}';

	return {
		fileName: 'model/'+className+extension,
		Code: javaString
	};
}
function processDaoClass(package, classInfo){

	var className = daoPrefix+classInfo.languageName;
	var fields = classInfo.fields;

	var autoGenerated = null;
	var primaryKey = [];
	var primaryKeySet = [];
	var fieldsNamesAll = [];
	var fieldsNames = [];
	var fieldsInsertPlaceHolders = [];
	var fieldsUpdatePlaceHolders = [];
	var i, f;

	for(i in fields){
		if(fields[i].primary){
			primaryKey.push(fields[i]);
			primaryKeySet.push(fields[i].sqlName + ' = ?');
		}
		if(fields[i].auto)
			autoGenerated = fields[i];
	}
	for(i in fields){
		f = fields[i];
		if(!fields[i].primary || primaryKey.length > 1){
			fieldsNames.push(f.sqlName);
			fieldsInsertPlaceHolders.push('?');
		}
		if(!fields[i].primary)
			fieldsUpdatePlaceHolders.push(f.sqlName + ' = ?');
		fieldsNamesAll.push(f.sqlName);
	}

	function setJDBCFieldCode(field){
		if(field.languageType === 'java.util.Date')
			return 'ps.setDate(++i, toDate(o.get' + field.funcName + '()));\n';
		if(field.reference)
			return 'ps.set' + field.referenceType.capitalize() + '(++i, o.get' + field.funcName + '().get' + field.referenceFunc + '() );\n';
		else
			return 'ps.set' + field.languageType.capitalize() + '(++i, o.' + field.getType + field.funcName + '());\n';
	}
	function getJDBCFieldCode(field){
		if(field.languageType === 'java.util.Date')
			return 'o.set' + field.funcName + '( toDate(rs.getDate(++i)) );\n';
		if(field.reference){

			return 'o.set' + field.funcName + '( new ' + field.languageType + '().set' + field.referenceFunc + '( rs.get' + field.referenceType.capitalize() + '(++i) ) );\n';
		}else
		return 'o.set' + field.funcName + '(rs.get' + field.languageType.capitalize() + '(++i));\n';
	}

	var javaClassCode =
	'package '+package+'dao;\n'+
	'\n'+
	'import java.sql.PreparedStatement;\n'+
	'import java.sql.ResultSet;\n'+
	'import java.sql.Statement;\n'+
	'import java.util.ArrayList;\n'+
	'\n'+
	'import '+package+'model.'+classInfo.languageName+';\n'+
	'\n'+
	'public class ' + className + ' extends Conexao {\n'+
	'\n'+
	'\tpublic boolean inserir(' + classInfo.languageName + ' o) {\n'+
	'\t\tboolean ok = false;\n'+
	'\t\ttry {\n'+
	'\t\t\tint i = 0;\n'+
	'\t\t\tPreparedStatement ps = con.prepareStatement("INSERT INTO ' + classInfo.sqlName + ' (' + fieldsNames.join(', ') + ') VALUES (' + fieldsInsertPlaceHolders.join(', ') + ')"' + (autoGenerated!==null?', Statement.RETURN_GENERATED_KEYS':'') + ');\n';

	for(i in fields){
		if(!f.auto)
			javaClassCode += '\t\t\t' + setJDBCFieldCode(fields[i]);
	}

	javaClassCode +=
	'\t\t\tok = ps.executeUpdate() > 0;\n'+
	(
		autoGenerated !== null?
		'\t\t\tResultSet rs = ps.getGeneratedKeys();\n'+
		'\t\t\trs.next();\n'+
		'\t\t\to.set' + autoGenerated.funcName + '(rs.get' + autoGenerated.languageType.capitalize() + '(1));\n'
		:''
		)+
	'\t\t} catch( Exception e ) {\n'+
	'\t\t} finally {\n'+
	'\t\t\tclose();\n'+
	'\t\t}\n'+
	'\t\treturn ok;\n'+
	'\t}\n';

	if(primaryKey.length){
		javaClassCode +=
		'\n'+
		'\tpublic boolean atualizar(' + classInfo.languageName + ' o) {\n';

		for(i in primaryKey){
			f = primaryKey[i];
			javaClassCode += '\t\tif (o.' + f.getType + f.funcName + '() == ';
			if( f.languageType === "String" )
				javaClassCode += 'null) return false;\n';
			else
				javaClassCode += '0) return false;\n';
		}

		javaClassCode +=
		'\t\ttry {\n'+
		'\t\t\tint i = 0;\n'+
		'\t\t\tPreparedStatement ps = con.prepareStatement("UPDATE ' + classInfo.sqlName + ' SET ' + fieldsUpdatePlaceHolders.join(', ') + ' WHERE ' + primaryKeySet.join(' and ') + '");\n';

		var tempCode, tempCodeBlock = '';
		for(i in fields){
			tempCode = '\t\t\t' + setJDBCFieldCode(fields[i]);
			if(fields[i].primary)
				tempCodeBlock += tempCode;
			else if(!fields[i].auto)
				javaClassCode += tempCode;
		}

		javaClassCode +=
		tempCodeBlock+
		'\t\t\treturn ps.executeUpdate() > 0;\n'+
		'\t\t} catch (Exception e) {\n'+
		'\t\t\treturn false;\n'+
		'\t\t} finally {\n'+
		'\t\t\tclose();\n'+
		'\t\t}\n'+
		'\t}\n';
	}
	javaClassCode +=
	'\n'+
	'\tpublic boolean excluir(' + classInfo.languageName + ' o) {\n'+
	'\t\ttry {\n'+
	'\t\t\tint i = 0;\n'+
	'\t\t\tPreparedStatement ps = con.prepareStatement("DELETE FROM ' + classInfo.sqlName + ' WHERE ' + primaryKeySet.join(' and ') + '");\n';

	for(i in primaryKey){
		javaClassCode += '\t\t\t' + setJDBCFieldCode(primaryKey[i]);
	}

	javaClassCode +=
	'\t\t\treturn ps.executeUpdate() > 0;\n'+
	'\t\t} catch (Exception e) {\n'+
	'\t\t\treturn false;\n'+
	'\t\t} finally {\n'+
	'\t\t\tclose();\n'+
	'\t\t}\n'+
	'\t}\n'+
	'\n'+
	'\tpublic ' + classInfo.languageName + '[] listar() {\n'+
	'\t\tArrayList<' + classInfo.languageName + '> objs = new ArrayList<>();\n'+
	'\t\t' + classInfo.languageName + '[] rt = null;\n'+
	'\t\ttry {\n'+
	'\t\t\tint i;\n'+
	'\t\t\t' + classInfo.languageName + ' o;\n'+
	'\t\t\tPreparedStatement ps = con.prepareStatement("SELECT ' + fieldsNamesAll.join(', ') + ' FROM ' + classInfo.sqlName + '");\n'+
	'\t\t\tResultSet rs = ps.executeQuery();\n'+
	'\t\t\twhile (rs.next()) {\n'+
	'\t\t\t\ti = 0;\n'+
	'\t\t\t\to = new ' + classInfo.languageName + '();\n';

	for(i in fields)
		javaClassCode += '\t\t\t\t' + getJDBCFieldCode(fields[i]);

	javaClassCode +=
	'\t\t\t\tobjs.add(o);\n'+
	'\t\t\t}\n'+
	'\t\t\trt = new ' + classInfo.languageName + '[objs.size()];\n'+
	'\t\t\ti = 0;\n'+
	'\t\t\tfor (' + classInfo.languageName + ' r : objs) {\n'+
	'\t\t\t\trt[i++] = r;\n'+
	'\t\t\t}\n'+
	'\t\t} catch (Exception e) {\n'+
	'\t\t\te.printStackTrace();\n'+
	'\t\t} finally {\n'+
	'\t\t\tclose();\n'+
	'\t\t}\n'+
	'\t\treturn rt;\n'+
	'\t}\n'+
	'}\n';
	return {
		fileName: 'dao/'+className+extension,
		Code: javaClassCode
	};
}

(function(factory) {
	var globalObject = typeof window === "object" && window || typeof self === "object" && self;
	if (typeof exports !== "undefined") {
		factory(exports);
	} else if (globalObject) {
		globalObject.javaLanguage = factory({});
		if (typeof define === "function" && define.amd) {
			define([], function() {
				return globalObject.javaLanguage;
			});
		}
	}
})(function (javaLanguage){

	javaLanguage.datatypeInfo = {
		LONGTEXT: "String",		BIGINT: "long",
		TEXT: "String",			LONG: "long",
		VARCHAR: "String",		REAL: "float",
		CHAR: "String",			FLOAT: "float",
		CHARACTER: "String",	DOUBLE: "double",
		SET: "String",			DECIMAL: "double",
		MULTISET: "String",		BINARY: "byte[]",
		BOOLEAN: "boolean",		VARBINARY: "byte[]",
		SMALLINT: "int",		TIME: "java.util.Date",
		TINYINT: "int",			DATE: "java.util.Date",
		INT: "int",				DATETIME: "java.util.Date",
		INTEGER: "int",			TIMESTAMP: "java.util.Date",
		NUMERIC: "int",			BLOB: "java.sql.Blob",
		INTERVAL: "int",		LONGBLOB: "java.sql.Blob"
	};
	javaLanguage.processClasses = function (package, classInfo, jpa){
		return [
			processClass(package, classInfo, jpa),
			processDaoClass(package, classInfo),
		];
	};
	javaLanguage.adcionalClasses = function (package){
		return [
			{
				fileName: 'dao/Conexao'+extension,
				Code: 'package ' + package + 'dao;\n\n' + conexaoClass
			}
		];
	};

	return javaLanguage;
});